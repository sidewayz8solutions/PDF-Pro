generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String?
  name              String?
  image             String?
  provider          String?   // google, github, email
  
  // Subscription
  stripeCustomerId  String?   @unique
  subscription      Subscription?
  
  // Usage tracking
  usage             Usage[]
  files             File[]
  apiKeys           ApiKey[]
  
  // Limits (reset monthly)
  monthlyCredits    Int       @default(5)
  creditsUsed       Int       @default(0)
  lastResetDate     DateTime  @default(now())
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Subscription {
  id                    String    @id @default(cuid())
  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id])
  
  // Stripe
  stripeSubscriptionId  String    @unique
  stripePriceId         String
  stripeCurrentPeriodEnd DateTime
  
  // Plan details
  plan                  Plan      @default(FREE)
  status                Status    @default(ACTIVE)
  
  // Features
  monthlyCredits        Int
  maxFileSize           Int       // in MB
  apiAccess            Boolean   @default(false)
  priorityProcessing   Boolean   @default(false)
  customBranding       Boolean   @default(false)
  
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model File {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  
  originalName      String
  filename          String
  size              Int       // bytes
  mimeType          String
  
  // Storage
  storageUrl        String    // S3 or local path
  thumbnailUrl      String?
  
  // Processing
  status            FileStatus @default(UPLOADED)
  processingData    Json?     // Store results of operations
  
  // Metadata
  pageCount         Int?
  isEncrypted       Boolean   @default(false)
  metadata          Json?
  
  expiresAt         DateTime? // Auto-delete after X days
  createdAt         DateTime  @default(now())
  
  usage             Usage[]
}

model Usage {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  
  operation         Operation
  credits           Int       @default(1)
  
  // Optional relations
  fileId            String?
  file              File?     @relation(fields: [fileId], references: [id])
  
  apiKeyId          String?
  apiKey            ApiKey?   @relation(fields: [apiKeyId], references: [id])
  
  // Details
  inputSize         Int?      // bytes
  outputSize        Int?      // bytes
  processingTime    Int?      // milliseconds
  
  createdAt         DateTime  @default(now())
  
  @@index([userId, createdAt])
}

model ApiKey {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  
  name              String
  key               String    @unique
  
  isActive          Boolean   @default(true)
  lastUsedAt        DateTime?
  expiresAt         DateTime?
  
  // Rate limiting
  requestsPerMonth  Int
  requestsUsed      Int       @default(0)
  
  usage             Usage[]
  
  createdAt         DateTime  @default(now())
}

enum Plan {
  FREE
  STARTER       // $9/mo
  PROFESSIONAL  // $29/mo
  BUSINESS      // $99/mo
}

enum Status {
  ACTIVE
  PAST_DUE
  CANCELED
  PAUSED
}

enum FileStatus {
  UPLOADED
  PROCESSING
  READY
  ERROR
  DELETED
}

enum Operation {
  COMPRESS
  MERGE
  SPLIT
  CONVERT_TO_PDF
  CONVERT_FROM_PDF
  EXTRACT_TEXT
  EXTRACT_IMAGES
  ADD_WATERMARK
  REMOVE_WATERMARK
  PASSWORD_PROTECT
  UNLOCK
  E_SIGN
  OCR
  ROTATE
  OPTIMIZE
}